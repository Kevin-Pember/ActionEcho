(()=>{let e={current:{actionSet:void 0,port:void 0,tab:void 0,actionPacket:void 0,editor:void 0},portArray:[],currentEditor:void 0,siteCache:void 0,uiLink:void 0,promisePorts:{tabs:[],push:t=>{e.promisePorts.tabs.push(t)},resolveTarget:t=>{let o,a=e.promisePorts.tabs.find(((e,a)=>{if(t.name==e.url)return o=a,!0}));a&&(a.resolve(t),console.log("%c Setting Current Port","background-color: green; font-size: 20px;"),e.current.port=t,e.promisePorts.tabs.splice(o,1))}},openTab:t=>new Promise(((o,a)=>{let r=e.portArray.find((e=>e.name==t));r?(chrome.tabs.update(r.tabId,{active:!0},(e=>{})),o(r)):(chrome.tabs.create({url:t,active:!0},(function(e){})),e.promisePorts.push({url:t,resolve:o,reject:a}))})),openURL:(t,o)=>new Promise(((a,r)=>{t.postMessage({action:"setURL",url:o}),e.promisePorts.push({url:o,resolve:a,reject:r})})),disconnectPort:t=>{t.disconnected=!0;let a=e.portArray.findIndex((e=>e.tabId==t.tabId));e.portArray.splice(a,1),0==e.portArray.length?e.current.port=void 0:e.current.port==t&&o.setCurrentPort(e.portArray[a]),t.editorActive&&e.closeEditor(),t.disconnected||t.disconnect()}},t={templates:{actionPacket:{v:1,site:void 0,action:"actionPacket",actions:[]}},runActions:async o=>{let a,r=t.getPackets(o);for(let t of r)a=t.site,"url"==a.format?(console.log(),e.current.port.name!=a.url&&(console.log("%c Forcing URL","background-color: green; font-size: 20px;"),await e.openURL(e.current.port,a.url))):await e.openTab(a.url),e.current.port.postMessage(t)},getUrls:e=>{let t=[];for(let o of e)"site"!=o.type||t.includes(o.url)||t.push(o.url);return t},getPackets:e=>{let o=e.filter((e=>"site"==e.type)),a=[];return o.forEach(((r,c)=>{let n=structuredClone(t.templates.actionPacket);n.actions=e.slice(e.indexOf(r)+1,c<o.length-1?e.indexOf(o[c+1]):e.length),n.site=r,a.push(n)})),a}},o={recording:!1,v:1,templates:{actionSet:{v:1,name:"",actions:[]},site:{type:"site",url:"",format:""},textAction:{type:"input",text:""}},data:{actionSet:void 0,site:{},textAction:{},caret:[],isSelection:!1,edit:[],redo:[],inputs:[]},startRecord:t=>{o.recording=!0,o.data.actionSet=structuredClone(o.templates.actionSet),o.data.site&&(o.data.actionSet.actions.push(o.data.site),o.data.site=void 0);try{e.current.port.postMessage({action:"startRecord"}),t({log:"started"})}catch{console.log("%c No Current Port","font-size: 20px; background-color: red;"),t({log:"noPort"})}},stopRecord:t=>{e.current.port.postMessage({action:"stopRecord"}),o.data.actionSet.log="finished",o.recording=!1,console.log("stopping record"),console.log(o.data.actionSet),o.data.actionSet.actions.length>1?t(o.data.actionSet):(console.log("%c Empty ActionList","font-size: 20px; background-color: red;"),t({log:"emptyActions"})),console.log("template is now:"),console.log(o.templates.actionSet),o.data.actionSet=structuredClone(o.templates.actionSet)},cacheSite:(e,t)=>{console.log("%c Caching site","font-size: 20px; background-color: green;");let a=structuredClone(o.templates.site);a.url=t,"newUrl"==e&&o.recording&&o.data.actionSet.actions.length>0?a.format="url":a.format="tab",o.recording?o.data.actionSet.actions.push(a):o.data.site=a},setCurrentPort:t=>{o.recording&&(e.current.port&&0==e.current.port.disconnected&&e.current.port.postMessage({action:"stopRecord"}),t.postMessage({action:"startRecord"}),o.data.inputs=[],o.data.caret=[],o.data.isSelection=!1,o.data.edit=[],o.data.redo=[]),e.current.port=t},parseLog:e=>{switch(console.log(e),e.type){case"click":if(console.log(e.textContext),o.data.actionSet.actions.push(e),null!=e.textContext){let t=o.data.inputs.find((t=>t.specifier==e.specifier));if(!t){let a={entry:structuredClone(o.templates.textAction),specifier:e.specifier,edit:[],redo:[]};""!=e.textContext&&(a.entry.text=e.textContext),o.data.inputs.push(a),o.data.actionSet.actions.push(a.entry),o.data.caret=e.caret.split("-").map((e=>Number(e))),o.data.isSelection=!(o.data.caret[0]===o.data.caret[1]),t=a}o.data.currentTextAction=t.entry,o.data.redo=t.redo,o.data.edit=t.edit,e.caret=void 0,e.textContext=void 0}break;case"input":console.log("input log"),console.log(o.data.currentTextAction),o.inputHandler(e.key,e.selection.split("-")),o.lastTextLog=e;break;case"key":switch(console.log("key log"),e.key){case"undo":console.log("undo"),o.data.edit.length>0&&(o.data.redo.push(o.data.currentTextAction.text),o.data.currentTextAction.text=o.data.edit.pop());break;case"redo":o.data.redo.length>0&&(o.data.edit.push(o.data.currentTextAction.text),o.data.currentTextAction.text=o.data.redo.pop());break;case"paste":o.inputHandler(e.text,e.selection.split("-"));break;case"cut":let t=e.selection.split("-");o.data.edit.push(o.data.currentTextAction.text),o.data.currentTextAction.text=o.data.currentTextAction.text.substring(0,t[0])+o.data.currentTextAction.text.substring(t[1],o.data.currentTextAction.text.length);break;case"all":o.data.caret[0]=0,o.data.caret[1]=o.data.currentTextAction.text.length;break;case"Enter":o.data.actionSet.actions.push(e);break;case"Backspace":let a=o.data.currentTextAction.text;o.data.currentTextAction.text=a.substring(0,o.data.caret[0]-1)+a.substring(o.data.caret[1]),o.data.caret=[o.data.caret[0]-1,o.data.caret[0]-1];break;case"ArrowLeft":o.data.isSelection||(o.data.caret[0]-=1),o.data.caret[1]=o.data.caret[0];break;case"ArrowRight":o.data.isSelection||(o.data.caret[1]+=1),o.data.caret[0]=o.data.caret[1];break;default:console.log("Default key log"),o.data.actionSet.actions.push(e)}}},inputHandler:e=>{let t=o.data.currentTextAction.text,a=e.length;o.data.edit.push(o.data.currentTextAction.text),o.data.currentTextAction.text=t.substring(0,o.data.caret[0])+e+t.substring(o.data.caret[1]),o.data.caret=[o.data.caret[0]+a,o.data.caret[0]+a]}},a={schedule:{times:[],actionLists:[]},checkTime:()=>{let e=Date.now();for(let t=0;t<a.schedule.times.length;t++)e>=a.schedule.times[t]&&(e-a.schedule.times[t]>1e4?(a.updateSchedule(t,!1),a.removeScheduledAction(t)):(a.completeIndex(t),a.updateSchedule(t,!0),a.removeScheduledAction(t)),t--)},completeIndex:async e=>{let o=a.schedule.actionLists[e].actions;console.log(o),await t.runActions(o)},addSchedule:e=>{a.schedule.actionLists.push(e),a.schedule.times.push(e.date)},updateSchedule:async(e,t)=>{let o=a.schedule.actionLists[e];o.state=t?"completed":"failed",chrome.storage.local.get(["pastEvents"]).then((e=>{null!=e.pastEvents?(e.pastEvents.push(o),chrome.storage.local.set(e)):chrome.storage.local.set({pastEvents:[o]})}))},removeScheduledAction:e=>{e>-1&&(a.schedule.actionLists.splice(e,1),a.schedule.times.splice(e,1),a.saveSchedule())},saveSchedule:()=>{chrome.storage.local.set({scheduledEvents:a.schedule.actionLists})}};chrome.alarms.onAlarm.addListener((async e=>{"clockAlarm"===e.name&&a.checkTime()})),(async()=>{await chrome.alarms.get("clockAlarm")||await chrome.alarms.create("clockAlarm",{periodInMinutes:.01})})(),chrome.storage.local.get(["recording"]).then((e=>{o.recording=null!=e.recording&&e.recording})),chrome.storage.local.get(["scheduledEvents"]).then((e=>{if(console.log(e),null!=e.scheduledEvents)for(let t of e.scheduledEvents)a.addSchedule(t)})),chrome.tabs.onUpdated.addListener((function(t,a,r){if(o.recording){let c=e.portArray.find((e=>e.tabId==t));c&&(c.name=r.url),a.title&&e.current.tab==t&&o.cacheSite("newUrl",r.url)}})),chrome.tabs.onActivated.addListener((t=>{console.log("Tab Activated"),chrome.tabs.get(t.tabId,(a=>{if("chrome://newtab/"!=a.url){let r=e.portArray.find((e=>e.tabId==t.tabId));r&&(console.log(`cached new site: ${a.url}`),o.cacheSite("newTab",a.url),o.setCurrentPort(r))}e.current.tab=t.tabId}))})),chrome.runtime.onConnect.addListener((function(t){console.log("Port Connected"),console.log(t),t.onMessage.addListener((function(a){switch(a.action){case"log":o.parseLog(a);break;case"resolve":e.current.actionPacket.resolve(a);break;case"closedEditor":let r=e.current.editor.editPromises.find((e=>e.tabId==t.tabId));r&&(r.resolve(a.actionList),e.current.editor.editPromises.splice(e.current.editor.editPromises.indexOf(r),1));break;case"closeEditor":console.log("messaged to close editor"),e.closeEditor();break;case"testLog":t.postMessage({action:"testCase"})}})),t.onDisconnect.addListener(e.disconnectPort),t.tabId=t.sender.tab.id;let a=0,r=e.portArray.find(((e,o)=>(a=o,e.tabId==t.sender.tab.id)));console.log(r),r&&(console.log("Port replaced: "+r.name),e.current.port==r&&(o.cacheSite("newUrl",r.name),o.setCurrentPort(t),o.recording&&t.postMessage({action:"startRecord"})),e.disconnectPort(r,a)),t.tabId==e.current.tab&&(o.cacheSite("newTab",t.name),e.current.port=t),e.portArray.push(t),console.log(e.portArray),console.log("Port Name: "+t.name),e.promisePorts.resolveTarget(t),console.log(e)})),chrome.runtime.onMessage.addListener(((r,c,n)=>{switch(r.action){case"startRecord":o.startRecord(n);break;case"stopRecord":o.stopRecord(n);break;case"scheduleActionSet":a.addSchedule(r.set),console.log(r.set),n({log:"added"});break;case"removeScheduledAction":let s=a.schedule.actionLists.findIndex((e=>e.id==r.id));a.removeScheduledAction(s),n({log:"removed"});break;case"runActionSet":t.runActions(r.set.actions);break;case"openEditor":e.current.editor?e.current.editor.id!=r.actionSet.name?n({log:"alreadyOpen"}):n({log:"noAction"}):(editor.openEditor(r),n({log:"opened"}));break;case"closeEditor":console.log("close Editor Called"),e.current.editor?(console.log("running close editor"),e.closeEditor().then((e=>{console.log("closed editor finished"),n({log:"closed",actionList:e})}))):n({log:"noEditor"});break;case"testLog":console.log("test log"),n({log:"test"});break;case"init":e.uiLink=c,n({log:"init",lists:a.schedule.actionLists})}return!0}))})();